name: Build CLI Artifacts

on:
  workflow_dispatch:
  workflow_call:
  
jobs:
  build_cli_linux:
    name: Building CLI - ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - linux-x86_64-gnu
          - linux-x86_64-musl

          - linux-aarch64-gnu
          - linux-aarch64-musl

          - linux-armv7-gnu
          - linux-armv7-musl

        include:
          - target: linux-x86_64-gnu
            arch: x86_64-unknown-linux-gnu

          - target: linux-x86_64-musl
            arch: x86_64-unknown-linux-musl

          - target: linux-aarch64-gnu
            arch: aarch64-unknown-linux-gnu

          - target: linux-aarch64-musl
            arch: aarch64-unknown-linux-musl

          - target: linux-armv7-gnu
            arch: armv7-unknown-linux-gnueabihf

          - target: linux-armv7-musl
            arch: armv7-unknown-linux-musleabihf

    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target
          key: ${{ runner.os }}-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-release-
        
      - name: Install cross
        run: cargo install cross

      - name: Build Linux CLI binaries
        run: cross build --verbose -p xmodits --release --target ${{ matrix.arch }}
      
      - name: Create ./bin directory
        run: mkdir -p bin

      - name: Tarball Linux CLI binary
        run: |
          tar -czf bin/xmodits-cli-${{ matrix.target }}.tar.gz -C target/${{matrix.arch}}/release/ xmodits
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: xmodits-cli-${{ matrix.target }}
          path: |
            bin/xmodits-cli-${{ matrix.target }}.*


  build_cli_macos:
    name: Building CLI for MacOS
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target
        key: ${{ runner.os }}-release-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-release-

    - name: Build macOS CLI binary
      run: cargo build --verbose -p xmodits --release

    - name: Create ./bin directory
      run: mkdir -p bin

    - name: Zip macOS CLI binary 
      run: | # todo add cli suffix to binary
        chmod +x target/release/xmodits
        zip ./bin/xmodits-cli-${{ runner.os }}.zip target/release/xmodits

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: xmodits-cli-${{ runner.os }}
        path: |
          bin/xmodits-cli-${{ runner.os }}.*


  build_cli_windows:
    name: Building CLI for Windows
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - windows-64-bit
          - windows-32-bit

        include:
          - target: windows-64-bit
            arch: x86_64-pc-windows-msvc

          - target: windows-32-bit
            arch: i686-pc-windows-msvc

    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.arch }}

    - uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target
        key: ${{ runner.os }}-release-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-release-

    - name: Install Windows 32 bit target
      if: matrix.arch == 'i686-pc-windows-msvc'
      run: | 
        rustup target add i686-pc-windows-msvc && rustup default stable-i686-pc-windows-msvc

    - name: Build Windows CLI binary
      run: cargo build --verbose -p xmodits --release

    - name: Create ./bin directory
      run: mkdir -p bin

    - name: Zip Windows CLI binary (64 bit)
      # if: matrix.arch == 'x86_64-pc-windows-msvc'
      run: | # On Windows, add cli suffix
        rm target/release/*xmodits-cli.exe
        mv target/release/xmodits.exe target/release/xmodits-cli.exe
        Compress-Archive target/release/xmodits-cli.exe bin/xmodits-cli-${{ matrix.target }}.zip
    
    # - name: Zip Windows CLI binary (64 bit)
    #   if: matrix.arch == 'x86_64-pc-windows-msvc'
    #   run: | # On Windows, add cli suffix
    #     rm target/release/*xmodits-cli.exe
    #     mv target/release/xmodits.exe target/release/xmodits-cli.exe
    #     Compress-Archive target/release/xmodits-cli.exe bin/xmodits-cli-${{ matrix.target }}.zip

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: xmodits-cli-${{ matrix.target }}
        path: |
          bin/xmodits-cli-${{ matrix.target}}.*


  # build:
  #   name: Building ${{ matrix.build_target }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       build_target: [linux, windows] # TODO: add more platforms
  #       include:
  #       - build_target: linux
  #         os: ubuntu-latest
  #       - build_target: windows
  #         os: windows-latest
          
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: dtolnay/rust-toolchain@stable
  #     - uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           target
  #         key: ${{ runner.os }}-release-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: ${{ runner.OS }}-release-
        
  #     - name: Building CLI
  #       run: cargo build -p xmodits --release

  #     - name: Create ./bin directory
  #       run: mkdir -p bin
          
  #     - name: Tarball Linux CLI binary
  #       if: matrix.os != 'windows-latest'
  #       run: |
  #         tar -czf bin/xmodits-cli-${{ matrix.build_target }}.tar.gz -C target/release/ xmodits

  #     - name: Zip Windows CLI binary
  #       if: matrix.os == 'windows-latest'
  #       run: | # On Windows, add cli suffix
  #         rm target/release/*xmodits-cli.exe
  #         mv target/release/xmodits.exe target/release/xmodits-cli.exe
  #         Compress-Archive target/release/xmodits-cli.exe bin/xmodits-cli-${{ matrix.build_target }}.zip

  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: xmodits-cli-${{ matrix.build_target }}
  #         path: |
  #           bin/xmodits-cli-${{ matrix.build_target }}.*
